import asyncio
import os
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import (init_db, add_order, get_all_orders, get_order_details,
                      update_order_status, update_order_due_date, delete_order,
                      reset_database, get_orders_for_notification, mark_notification_sent)

logging.basicConfig(level=logging.INFO)
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

class OrderState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_due_date = State()

private_chat_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚öôÔ∏è –°—Ç–∞–¥–∏—è –∑–∞–∫–∞–∑–∞")],
        [KeyboardButton(text="‚ö†Ô∏è –°–±—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

group_chat_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã")],
    ],
    resize_keyboard=True
)

async def set_main_menu(bot: Bot):
    await bot.set_my_commands([BotCommand(command='/start', description='–ó–∞–ø—É—Å–∫ / –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞')])

@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{message.chat.id}`", parse_mode="MarkdownV2")

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚öôÔ∏è –°—Ç–∞–¥–∏—è –∑–∞–∫–∞–∑–∞")]
        ],
        resize_keyboard=True
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫–µ
    if str(message.from_user.id) == ADMIN_ID and message.chat.type == 'private':
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —Å–±—Ä–æ—Å.",
            reply_markup=private_chat_kb
        )
    # –û–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫–µ
    elif message.chat.type == 'private':
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.",
            reply_markup=user_kb
        )
    # –í –≥—Ä—É–ø–ø–µ
    else:
        await message.answer(
            "–ë–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=group_chat_kb
        )

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order_process(message: types.Message, state: FSMContext):
    if message.chat.type != 'private':
        await message.answer("–î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    await state.update_data(chat_id=message.chat.id)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.waiting_for_photo)

@dp.message(OrderState.waiting_for_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
    await state.set_state(OrderState.waiting_for_description)

@dp.message(OrderState.waiting_for_description, F.text)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.set_state(OrderState.waiting_for_phone)

@dp.message(OrderState.waiting_for_phone, F.text)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
    await state.set_state(OrderState.waiting_for_address)

@dp.message(OrderState.waiting_for_address, F.text)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–ê–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç. –£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await state.set_state(OrderState.waiting_for_due_date)

@dp.message(OrderState.waiting_for_due_date, F.text)
async def process_due_date(message: types.Message, state: FSMContext):
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    await state.update_data(due_date=due_date.isoformat())
    user_data = await state.get_data()
    await add_order(user_data)
    
    kb = private_chat_kb if str(message.from_user.id) == ADMIN_ID else ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],[KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚öôÔ∏è –°—Ç–∞–¥–∏—è –∑–∞–∫–∞–∑–∞")]],resize_keyboard=True)
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=kb)

    if GROUP_ID:
        try:
            await bot.send_message(chat_id=GROUP_ID,text=f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–í—Å–µ –∑–∞–∫–∞–∑—ã¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}: {e}")
    await state.clear()

@dp.message(F.text == "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã")
async def show_all_orders(message: types.Message):
    orders = await get_all_orders()
    if not orders:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    builder = InlineKeyboardBuilder()
    for order_id, description in orders:
        builder.add(InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} - {description[:20]}...", callback_data=f"view_order:{order_id}"))
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:", reply_markup=builder.as_markup())

@dp.message(F.text == "‚öôÔ∏è –°—Ç–∞–¥–∏—è –∑–∞–∫–∞–∑–∞")
async def change_status_menu(message: types.Message):
    if message.chat.type != 'private':
        await message.answer("–£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞–¥–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    orders = await get_all_orders()
    if not orders:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    builder = InlineKeyboardBuilder()
    for order_id, description in orders:
        builder.add(InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} - {description[:20]}...", callback_data=f"edit_order:{order_id}"))
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("view_order:"))
async def view_order_callback(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order_details = await get_order_details(order_id)
    chat_id_to_send = callback.message.chat.id
    if order_details:
        _, _, photo_id, desc, phone, address, status, _, due_date_iso, _ = order_details
        due_date_str = datetime.fromisoformat(due_date_iso).strftime("%d.%m.%Y")
        caption = (f"<b>–î–µ—Ç–∞–ª–∏ –ó–∞–∫–∞–∑–∞ ‚Ññ{order_id}</b>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {due_date_str}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n<b>–ê–¥—Ä–µ—Å:</b> {address}")
        await bot.send_photo(chat_id=chat_id_to_send, photo=photo_id, caption=caption)
        await callback.message.delete()
    else:
        await bot.send_message(chat_id_to_send, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.")
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_order:"))
async def show_edit_menu(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    builder = InlineKeyboardBuilder()
    statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ì–æ—Ç–æ–≤", "–ó–∞–≤–µ—Ä—à—ë–Ω"]
    for status in statuses:
        builder.add(InlineKeyboardButton(text=status, callback_data=f"set_status:{order_id}:{status}"))
    days = [3, 7, 10, 15]
    for day in days:
        builder.add(InlineKeyboardButton(text=f"{day} –¥–Ω–µ–π", callback_data=f"set_due:{order_id}:{day}"))
    builder.add(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"delete_confirm:{order_id}"))
    builder.adjust(3, 2, 1)
    await callback.message.edit_text(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("set_status:"))
async def set_status_callback(callback: types.CallbackQuery):
    _, order_id, new_status = callback.data.split(":")
    await update_order_status(int(order_id), new_status)
    await callback.message.edit_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'.")
    await callback.answer()

@dp.callback_query(F.data.startswith("set_due:"))
async def set_due_callback(callback: types.CallbackQuery):
    _, order_id, days = callback.data.split(":")
    new_due_date = datetime.now() + timedelta(days=int(days))
    await update_order_due_date(int(order_id), new_due_date.isoformat())
    await callback.message.edit_text(f"‚úÖ –°—Ä–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_due_date.strftime('%d.%m.%Y')}.")
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_confirm:"))
async def delete_confirm_callback(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_execute:{order_id}"))
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data=f"edit_order:{order_id}"))
    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}?", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("delete_execute:"))
async def delete_execute_callback(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await delete_order(order_id)
    await callback.message.edit_text(f"üóëÔ∏è –ó–∞–∫–∞–∑ ‚Ññ{order_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    if GROUP_ID:
        try:
            await bot.send_message(GROUP_ID, f"üóëÔ∏è –ó–∞–∫–∞–∑ ‚Ññ{order_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}: {e}")
    await callback.answer()

@dp.message(F.text == "‚ö†Ô∏è –°–±—Ä–æ—Å")
async def reset_handler(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí£ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë!", callback_data="reset_execute_confirm"))
    builder.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="reset_cancel"))
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ **–ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–ê–ö–ê–ó–´** –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ ID?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "reset_cancel")
async def reset_cancel_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")

@dp.callback_query(F.data == "reset_execute_confirm")
async def reset_execute_confirm_callback(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return
    await reset_database()
    await callback.message.edit_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞. –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 1.")
    if GROUP_ID:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
            await bot.send_message(GROUP_ID, "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤—ë–ª —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}: {e}")
    await callback.answer()

async def check_deadlines():
    orders = await get_orders_for_notification()
    now = datetime.now()
    for order in orders:
        order_id, chat_id, description, due_date_iso = order
        if not chat_id: continue
        due_date = datetime.fromisoformat(due_date_iso)
        if due_date > now and (due_date - now) < timedelta(days=1):
            try:
                await bot.send_message(chat_id=chat_id,text=f"‚ùóÔ∏è<b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>‚ùóÔ∏è\n\n–°—Ä–æ–∫ —Å–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} ({description}) –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞, {due_date.strftime('%d.%m.%Y')}!")
                await mark_notification_sent(order_id)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ —á–∞—Ç {chat_id}: {e}")

async def main():
    await init_db()
    await set_main_menu(bot)
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(check_deadlines, 'interval', hours=1)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())